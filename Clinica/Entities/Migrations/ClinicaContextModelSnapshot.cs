// <auto-generated />
using System;
using Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(ClinicaContext))]
    partial class ClinicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Entities.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"), 1L, 1);

                    b.Property<int?>("IdClinica")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdHorario")
                        .HasColumnType("int");

                    b.Property<bool?>("StatusCita")
                        .HasColumnType("bit");

                    b.HasKey("IdCita")
                        .HasName("PK__Cita__394B020239CAEC53");

                    b.HasIndex("IdClinica");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdEspecialidad");

                    b.HasIndex("IdHorario");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Entities.Entities.Clinica", b =>
                {
                    b.Property<int>("IdClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClinica"), 1L, 1);

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdClinica")
                        .HasName("PK__Clinica__52A90951867BBDD8");

                    b.ToTable("Clinica", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Diagnostico", b =>
                {
                    b.Property<int>("IdDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDiagnostico"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("IdReserva")
                        .HasColumnType("int");

                    b.HasKey("IdDiagnostico")
                        .HasName("PK__Diagnost__BD16DB69AFA90FA6");

                    b.HasIndex("IdReserva");

                    b.ToTable("Diagnostico", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoctor"), 1L, 1);

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("StatusDoctor")
                        .HasColumnType("bit");

                    b.HasKey("IdDoctor")
                        .HasName("PK__Doctor__F838DB3ED520D352");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Especialidad", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"), 1L, 1);

                    b.Property<int?>("IdPrecio")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("StatusEspecialidad")
                        .HasColumnType("bit");

                    b.HasKey("IdEspecialidad")
                        .HasName("PK__Especial__693FA0AF4E7B6A5F");

                    b.HasIndex("IdPrecio");

                    b.ToTable("Especialidad", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFactura"), 1L, 1);

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdReserva")
                        .HasColumnType("int");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.HasKey("IdFactura")
                        .HasName("PK__Facturas__50E7BAF174427AED");

                    b.HasIndex("IdReserva");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Entities.Entities.Horario", b =>
                {
                    b.Property<int>("IdHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorario"), 1L, 1);

                    b.Property<string>("Dia")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Hora")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("StatusHorario")
                        .HasColumnType("bit");

                    b.HasKey("IdHorario")
                        .HasName("PK__Horario__1539229BDB4BBAA8");

                    b.ToTable("Horario", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Precio", b =>
                {
                    b.Property<int>("IdPrecio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrecio"), 1L, 1);

                    b.Property<int?>("Valor")
                        .HasColumnType("int");

                    b.HasKey("IdPrecio")
                        .HasName("PK__Precio__2450584BF82D9FD8");

                    b.ToTable("Precio", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Reserva", b =>
                {
                    b.Property<int>("IdReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReserva"), 1L, 1);

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdCita")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatusReserva")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("Precio")
                        .HasColumnType("int");

                    b.HasKey("IdReserva")
                        .HasName("PK__Reserva__0E49C69DB47220C3");

                    b.HasIndex("IdCita");

                    b.HasIndex("IdStatusReserva");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reserva", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"), 1L, 1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdRol")
                        .HasName("PK__Rol__2A49584C830E78C0");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoCitasResult", b =>
                {
                    b.Property<string>("DiaHorario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraHorario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.Property<string>("NombreClinica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEspecialidad")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SpObtenerInfoCitasResults");
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoDiagnosticosResult", b =>
                {
                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDiagnostico")
                        .HasColumnType("int");

                    b.Property<string>("NombreDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SpObtenerInfoDiagnosticosResults");
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoEspecialidadesResult", b =>
                {
                    b.Property<string>("EstadoEspecialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<string>("NombreEspecialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrecioEspecialidad")
                        .HasColumnType("int");

                    b.ToTable("SpObtenerInfoEspecialidadesResult");
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoFacturasConUsuario", b =>
                {
                    b.Property<DateTime?>("FechaFactura")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.ToTable("SpObtenerInfoFacturasConUsuarios");
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoReservasResult", b =>
                {
                    b.Property<string>("EstadoReserva")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaReserva")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.Property<int>("IdReserva")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Precio")
                        .HasColumnType("int");

                    b.ToTable("SpObtenerInfoReservasResults");
                });

            modelBuilder.Entity("Entities.Entities.SpObtenerInfoUsuariosConRolResult", b =>
                {
                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NombreRol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SpObtenerInfoUsuariosConRolResults");
                });

            modelBuilder.Entity("Entities.Entities.StatusReserva", b =>
                {
                    b.Property<int>("IdStatusReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusReserva"), 1L, 1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdStatusReserva")
                        .HasName("PK__StatusRe__89FBDF160EDACB14");

                    b.ToTable("StatusReserva", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<string>("Apellido")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clave")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("Edad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("StatusUsuario")
                        .HasColumnType("bit");

                    b.HasKey("IdUsuario")
                        .HasName("PK__Usuario__5B65BF97B5BCAC4B");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Entities.Utilities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Cita", b =>
                {
                    b.HasOne("Entities.Entities.Clinica", "IdClinicaNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("IdClinica")
                        .HasConstraintName("FK__Cita__IdClinica__49C3F6B7");

                    b.HasOne("Entities.Entities.Doctor", "IdDoctorNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("IdDoctor")
                        .HasConstraintName("FK__Cita__IdDoctor__47DBAE45");

                    b.HasOne("Entities.Entities.Especialidad", "IdEspecialidadNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("IdEspecialidad")
                        .HasConstraintName("FK__Cita__IdEspecial__48CFD27E");

                    b.HasOne("Entities.Entities.Horario", "IdHorarioNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("IdHorario")
                        .HasConstraintName("FK__Cita__IdHorario__4AB81AF0");

                    b.Navigation("IdClinicaNavigation");

                    b.Navigation("IdDoctorNavigation");

                    b.Navigation("IdEspecialidadNavigation");

                    b.Navigation("IdHorarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Diagnostico", b =>
                {
                    b.HasOne("Entities.Entities.Reserva", "IdReservaNavigation")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("IdReserva")
                        .HasConstraintName("FK__Diagnosti__IdRes__59063A47");

                    b.Navigation("IdReservaNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Especialidad", b =>
                {
                    b.HasOne("Entities.Entities.Precio", "IdPrecioNavigation")
                        .WithMany("Especialidads")
                        .HasForeignKey("IdPrecio")
                        .HasConstraintName("FK__Especiali__IdPre__3F466844");

                    b.Navigation("IdPrecioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Factura", b =>
                {
                    b.HasOne("Entities.Entities.Reserva", "IdReservaNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdReserva")
                        .HasConstraintName("FK__Facturas__IdRese__5535A963");

                    b.Navigation("IdReservaNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Reserva", b =>
                {
                    b.HasOne("Entities.Entities.Cita", "IdCitaNavigation")
                        .WithMany("Reservas")
                        .HasForeignKey("IdCita")
                        .HasConstraintName("FK__Reserva__IdCita__4F7CD00D");

                    b.HasOne("Entities.Entities.StatusReserva", "IdStatusReservaNavigation")
                        .WithMany("Reservas")
                        .HasForeignKey("IdStatusReserva")
                        .HasConstraintName("FK__Reserva__IdStatu__5165187F");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("Reservas")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK__Reserva__IdUsuar__5070F446");

                    b.Navigation("IdCitaNavigation");

                    b.Navigation("IdStatusReservaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.HasOne("Entities.Entities.Role", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK__Usuario__IdRol__3A81B327");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.Cita", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Entities.Entities.Clinica", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Entities.Entities.Doctor", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Entities.Entities.Especialidad", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Entities.Entities.Horario", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Entities.Entities.Precio", b =>
                {
                    b.Navigation("Especialidads");
                });

            modelBuilder.Entity("Entities.Entities.Reserva", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.StatusReserva", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
